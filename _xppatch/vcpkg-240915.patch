From 767e79661c24f55ed5d2a1963218622d647e7d0c Mon Sep 17 00:00:00 2001
From: newbie-461 <139617217+newbie-461@users.noreply.github.com>
Date: Sun, 15 Sep 2024 09:52:39 +0000
Subject: [PATCH] 240915

---
 ports/curl/nt0501.patch                       |  36 +
 ports/curl/portfile.cmake                     |   1 +
 ports/opencascade/nt0501.diff                 |  22 +
 ports/opencascade/portfile.cmake              |   1 +
 ports/openssl/portfile.cmake                  |   1 +
 ports/openssl/windows/nt0501.patch            |  34 +
 .../9999-restore-support-for-windows-xp.patch | 980 ++++++++++++++++++
 ports/python3/portfile.cmake                  |  10 +-
 triplets/x86-windows.cmake                    |   2 +-
 9 files changed, 1082 insertions(+), 5 deletions(-)
 create mode 100644 ports/curl/nt0501.patch
 create mode 100644 ports/opencascade/nt0501.diff
 create mode 100644 ports/openssl/windows/nt0501.patch
 create mode 100644 ports/python3/9999-restore-support-for-windows-xp.patch

diff --git a/ports/curl/nt0501.patch b/ports/curl/nt0501.patch
new file mode 100644
index 000000000..e700c145a
--- /dev/null
+++ b/ports/curl/nt0501.patch
@@ -0,0 +1,36 @@
+---
+ CMakeLists.txt   | 10 +++++-----
+ lib/curl_setup.h |  3 +++
+ 2 files changed, 8 insertions(+), 5 deletions(-)
+
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index f8906f9..efbda71 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -1199,8 +1199,8 @@ if(WIN32)
+         set(HAVE_INET_NTOP 0)
+         set(HAVE_INET_PTON 0)
+       else()  # Windows Vista or newer
+-        set(HAVE_INET_NTOP 1)
+-        set(HAVE_INET_PTON 1)
++        set(HAVE_INET_NTOP 0)
++        set(HAVE_INET_PTON 0)
+       endif()
+       unset(HAVE_INET_NTOP CACHE)
+       unset(HAVE_INET_PTON CACHE)
+diff --git a/lib/curl_setup.h b/lib/curl_setup.h
+index 6c05b87..2bd2c5a 100644
+--- a/lib/curl_setup.h
++++ b/lib/curl_setup.h
+@@ -1,5 +1,8 @@
+ #ifndef HEADER_CURL_SETUP_H
+ #define HEADER_CURL_SETUP_H
++
++#define _WIN32_WINNT 0x0501
++
+ /***************************************************************************
+  *                                  _   _ ____  _
+  *  Project                     ___| | | |  _ \| |
+-- 
+2.46.0.windows.1
+
diff --git a/ports/curl/portfile.cmake b/ports/curl/portfile.cmake
index 4260a68ae..a844b6cd5 100644
--- a/ports/curl/portfile.cmake
+++ b/ports/curl/portfile.cmake
@@ -14,6 +14,7 @@ vcpkg_from_github(
         dependencies.patch
         cmake-config.patch
         gnutls.patch
+        nt0501.patch
 )
 
 vcpkg_check_features(OUT_FEATURE_OPTIONS FEATURE_OPTIONS
diff --git a/ports/opencascade/nt0501.diff b/ports/opencascade/nt0501.diff
new file mode 100644
index 000000000..359c7fe73
--- /dev/null
+++ b/ports/opencascade/nt0501.diff
@@ -0,0 +1,22 @@
+diff --git a/src/OSD/OSD_MemInfo.cxx b/src/OSD/OSD_MemInfo.cxx
+index 21812b22e..8a9f10e09 100644
+--- a/src/OSD/OSD_MemInfo.cxx
++++ b/src/OSD/OSD_MemInfo.cxx
+@@ -1,3 +1,4 @@
++#define PSAPI_VERSION 1
+ // Created on: 2011-10-05
+ // Created by: Kirill GAVRILOV
+ // Copyright (c) 2013-2014 OPEN CASCADE SAS
+diff --git a/src/OSD/OSD_Timer.hxx b/src/OSD/OSD_Timer.hxx
+index a56f91ea9..43548eb74 100644
+--- a/src/OSD/OSD_Timer.hxx
++++ b/src/OSD/OSD_Timer.hxx
+@@ -17,6 +17,8 @@
+ #ifndef _OSD_Timer_HeaderFile
+ #define _OSD_Timer_HeaderFile
+ 
++#define _WIN32_WINNT 0x0501
++
+ #include <Standard.hxx>
+ #include <Standard_DefineAlloc.hxx>
+ #include <Standard_Handle.hxx>
diff --git a/ports/opencascade/portfile.cmake b/ports/opencascade/portfile.cmake
index f6b0f1dc6..6ac089df0 100644
--- a/ports/opencascade/portfile.cmake
+++ b/ports/opencascade/portfile.cmake
@@ -12,6 +12,7 @@ vcpkg_from_github(
         fix-install-prefix-path.patch
         install-include-dir.patch
         fix-freetype.diff # https://github.com/Open-Cascade-SAS/OCCT/pull/49
+        nt0501.diff
 )
 
 if (VCPKG_LIBRARY_LINKAGE STREQUAL "dynamic")
diff --git a/ports/openssl/portfile.cmake b/ports/openssl/portfile.cmake
index c9b702d93..140ba3afa 100644
--- a/ports/openssl/portfile.cmake
+++ b/ports/openssl/portfile.cmake
@@ -25,6 +25,7 @@ vcpkg_from_github(
         asm-armcap.patch
         windows/install-layout.patch
         windows/install-pdbs.patch
+        windows/nt0501.patch
         unix/android-cc.patch
         unix/move-openssldir.patch
         unix/no-empty-dirs.patch
diff --git a/ports/openssl/windows/nt0501.patch b/ports/openssl/windows/nt0501.patch
new file mode 100644
index 000000000..8e89e0b5f
--- /dev/null
+++ b/ports/openssl/windows/nt0501.patch
@@ -0,0 +1,34 @@
+---
+ crypto/threads_win.c               | 2 +-
+ include/openssl/configuration.h.in | 2 ++
+ 2 files changed, 3 insertions(+), 1 deletion(-)
+
+diff --git a/crypto/threads_win.c b/crypto/threads_win.c
+index bc430ef..46cde58 100644
+--- a/crypto/threads_win.c
++++ b/crypto/threads_win.c
+@@ -9,7 +9,7 @@
+ 
+ #if defined(_WIN32)
+ # include <windows.h>
+-# if defined(_WIN32_WINNT) && _WIN32_WINNT >= 0x600
++# if 0 && defined(_WIN32_WINNT) && _WIN32_WINNT >= 0x600
+ #  define USE_RWLOCK
+ # endif
+ #endif
+diff --git a/include/openssl/configuration.h.in b/include/openssl/configuration.h.in
+index 86077d0..75a0777 100644
+--- a/include/openssl/configuration.h.in
++++ b/include/openssl/configuration.h.in
+@@ -13,6 +13,8 @@
+ # define OPENSSL_CONFIGURATION_H
+ # pragma once
+ 
++#define _WIN32_WINNT 0x0501
++
+ # ifdef  __cplusplus
+ extern "C" {
+ # endif
+-- 
+2.46.0.windows.1
+
diff --git a/ports/python3/9999-restore-support-for-windows-xp.patch b/ports/python3/9999-restore-support-for-windows-xp.patch
new file mode 100644
index 000000000..2ec3a8ae8
--- /dev/null
+++ b/ports/python3/9999-restore-support-for-windows-xp.patch
@@ -0,0 +1,980 @@
+---
+ Lib/ntpath.py                   |   6 +-
+ Modules/_winapi.c               | 142 +++++++++++++++-----------------
+ Modules/clinic/_winapi.c.h      |   2 +
+ Modules/clinic/posixmodule.c.h  |   2 +-
+ Modules/getaddrinfo.c           |   1 +
+ Modules/getnameinfo.c           |  20 ++++-
+ Modules/getpath.c               |   3 +-
+ Modules/overlapped.c            |  17 ++--
+ Modules/posixmodule.c           |   9 +-
+ Modules/socketmodule.c          |  55 +++++++++++--
+ Modules/socketmodule.h          |   2 +
+ Modules/timemodule.c            |  26 +-----
+ PC/launcher2.c                  |   2 +
+ PC/msvcrtmodule.c               |   2 +-
+ PC/winreg.c                     |   3 +-
+ PCbuild/_freeze_module.vcxproj  |   2 +-
+ PCbuild/_testconsole.vcxproj    |   2 +-
+ PCbuild/_testembed.vcxproj      |   2 +-
+ PCbuild/_testmultiphase.vcxproj |   2 +-
+ PCbuild/pylauncher.vcxproj      |   2 +-
+ PCbuild/pyproject.props         |   2 +-
+ PCbuild/pyshellext.vcxproj      |   2 +-
+ PCbuild/python.vcxproj          |   2 +-
+ PCbuild/python_uwp.vcxproj      |   2 +-
+ PCbuild/pythonw_uwp.vcxproj     |   2 +-
+ PCbuild/pywlauncher.vcxproj     |   2 +-
+ PCbuild/venvlauncher.vcxproj    |   2 +-
+ PCbuild/venvwlauncher.vcxproj   |   2 +-
+ Python/pytime.c                 |   2 +-
+ 29 files changed, 180 insertions(+), 140 deletions(-)
+
+diff --git a/Lib/ntpath.py b/Lib/ntpath.py
+index 0246419..7ed1201 100644
+--- a/Lib/ntpath.py
++++ b/Lib/ntpath.py
+@@ -575,7 +575,7 @@ def abspath(path):
+             return _abspath_fallback(path)
+ 
+ try:
+-    from nt import _getfinalpathname, readlink as _nt_readlink
++    from nt import readlink as _nt_readlink
+ except ImportError:
+     # realpath is a no-op on systems without _getfinalpathname support.
+     realpath = abspath
+@@ -846,6 +846,10 @@ def commonpath(paths):
+         raise
+ 
+ 
++def _getfinalpathname(f):
++    return normcase(abspath(f))
++
++
+ try:
+     # The genericpath.isdir implementation uses os.stat and checks the mode
+     # attribute to tell whether or not the path is a directory.
+diff --git a/Modules/_winapi.c b/Modules/_winapi.c
+index 2e94a4e..8380a9a 100644
+--- a/Modules/_winapi.c
++++ b/Modules/_winapi.c
+@@ -808,6 +808,7 @@ gethandle(PyObject* obj, const char* name)
+     return ret;
+ }
+ 
++#if 0
+ static PyObject *
+ sortenvironmentkey(PyObject *module, PyObject *item)
+ {
+@@ -860,7 +861,8 @@ compare_string_ordinal(PyObject *str1, PyObject *str2, int *result)
+         PyMem_Free(s1);
+         return -1;
+     }
+-    *result = CompareStringOrdinal(s1, -1, s2, -1, TRUE);
++    *result = _wcsicmp(s1, s2);
++    //*result = CompareStringOrdinal(s1, -1, s2, -1, TRUE);
+     PyMem_Free(s1);
+     PyMem_Free(s2);
+     return 0;
+@@ -955,15 +957,14 @@ normalize_environment(PyObject *environment)
+ 
+     return result;
+ }
++#endif
+ 
+-static wchar_t *
++static PyObject*
+ getenvironment(PyObject* environment)
+ {
+     Py_ssize_t i, envsize, totalsize;
+-    wchar_t *buffer = NULL, *p, *end;
+-    PyObject *normalized_environment = NULL;
+-    PyObject *keys = NULL;
+-    PyObject *values = NULL;
++    Py_UCS4 *buffer = NULL, *p, *end;
++    PyObject *keys, *values, *res;
+ 
+     /* convert environment dictionary to windows environment string */
+     if (! PyMapping_Check(environment)) {
+@@ -972,33 +973,17 @@ getenvironment(PyObject* environment)
+         return NULL;
+     }
+ 
+-    normalized_environment = normalize_environment(environment);
+-    if (normalize_environment == NULL) {
+-        return NULL;
+-    }
+-
+-    keys = PyMapping_Keys(normalized_environment);
++    keys = PyMapping_Keys(environment);
+     if (!keys) {
+-        goto error;
++        return NULL;
+     }
+-    values = PyMapping_Values(normalized_environment);
++    values = PyMapping_Values(environment);
+     if (!values) {
+         goto error;
+     }
+ 
+-    envsize = PyList_GET_SIZE(keys);
+-
+-    if (envsize == 0) {
+-        // A environment block must be terminated by two null characters --
+-        // one for the last string and one for the block.
+-        buffer = PyMem_Calloc(2, sizeof(wchar_t));
+-        if (!buffer) {
+-            PyErr_NoMemory();
+-        }
+-        goto cleanup;
+-    }
+-
+-    if (PyList_GET_SIZE(values) != envsize) {
++    envsize = PySequence_Fast_GET_SIZE(keys);
++    if (PySequence_Fast_GET_SIZE(values) != envsize) {
+         PyErr_SetString(PyExc_RuntimeError,
+             "environment changed size during iteration");
+         goto error;
+@@ -1006,9 +991,8 @@ getenvironment(PyObject* environment)
+ 
+     totalsize = 1; /* trailing null character */
+     for (i = 0; i < envsize; i++) {
+-        PyObject* key = PyList_GET_ITEM(keys, i);
+-        PyObject* value = PyList_GET_ITEM(values, i);
+-        Py_ssize_t size;
++        PyObject* key = PySequence_Fast_GET_ITEM(keys, i);
++        PyObject* value = PySequence_Fast_GET_ITEM(values, i);
+ 
+         if (! PyUnicode_Check(key) || ! PyUnicode_Check(value)) {
+             PyErr_SetString(PyExc_TypeError,
+@@ -1029,25 +1013,19 @@ getenvironment(PyObject* environment)
+             PyErr_SetString(PyExc_ValueError, "illegal environment variable name");
+             goto error;
+         }
+-
+-        size = PyUnicode_AsWideChar(key, NULL, 0);
+-        assert(size > 1);
+-        if (totalsize > PY_SSIZE_T_MAX - size) {
++        if (totalsize > PY_SSIZE_T_MAX - PyUnicode_GET_LENGTH(key) - 1) {
+             PyErr_SetString(PyExc_OverflowError, "environment too long");
+             goto error;
+         }
+-        totalsize += size;    /* including '=' */
+-
+-        size = PyUnicode_AsWideChar(value, NULL, 0);
+-        assert(size > 0);
+-        if (totalsize > PY_SSIZE_T_MAX - size) {
++        totalsize += PyUnicode_GET_LENGTH(key) + 1;    /* +1 for '=' */
++        if (totalsize > PY_SSIZE_T_MAX - PyUnicode_GET_LENGTH(value) - 1) {
+             PyErr_SetString(PyExc_OverflowError, "environment too long");
+             goto error;
+         }
+-        totalsize += size;  /* including trailing '\0' */
++        totalsize += PyUnicode_GET_LENGTH(value) + 1;  /* +1 for '\0' */
+     }
+ 
+-    buffer = PyMem_NEW(wchar_t, totalsize);
++    buffer = PyMem_NEW(Py_UCS4, totalsize);
+     if (! buffer) {
+         PyErr_NoMemory();
+         goto error;
+@@ -1056,27 +1034,34 @@ getenvironment(PyObject* environment)
+     end = buffer + totalsize;
+ 
+     for (i = 0; i < envsize; i++) {
+-        PyObject* key = PyList_GET_ITEM(keys, i);
+-        PyObject* value = PyList_GET_ITEM(values, i);
+-        Py_ssize_t size = PyUnicode_AsWideChar(key, p, end - p);
+-        assert(1 <= size && size < end - p);
+-        p += size;
+-        *p++ = L'=';
+-        size = PyUnicode_AsWideChar(value, p, end - p);
+-        assert(0 <= size && size < end - p);
+-        p += size + 1;
+-    }
+-
+-    /* add trailing null character */
+-    *p++ = L'\0';
++        PyObject* key = PySequence_Fast_GET_ITEM(keys, i);
++        PyObject* value = PySequence_Fast_GET_ITEM(values, i);
++        if (!PyUnicode_AsUCS4(key, p, end - p, 0))
++            goto error;
++        p += PyUnicode_GET_LENGTH(key);
++        *p++ = '=';
++        if (!PyUnicode_AsUCS4(value, p, end - p, 0))
++            goto error;
++        p += PyUnicode_GET_LENGTH(value);
++        *p++ = '\0';
++    }
++
++    /* add trailing null byte */
++    *p++ = '\0';
+     assert(p == end);
+ 
+-cleanup:
+-error:
+-    Py_XDECREF(normalized_environment);
+     Py_XDECREF(keys);
+     Py_XDECREF(values);
+-    return buffer;
++
++    res = PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND, buffer, p - buffer);
++    PyMem_Free(buffer);
++    return res;
++
++ error:
++    PyMem_Free(buffer);
++    Py_XDECREF(keys);
++    Py_XDECREF(values);
++    return NULL;
+ }
+ 
+ static LPHANDLE
+@@ -1126,7 +1111,7 @@ gethandlelist(PyObject *mapping, const char *name, Py_ssize_t *size)
+     Py_XDECREF(value_fast);
+     return ret;
+ }
+-
++#if 0
+ typedef struct {
+     LPPROC_THREAD_ATTRIBUTE_LIST attribute_list;
+     LPHANDLE handle_list;
+@@ -1237,7 +1222,7 @@ getattributelist(PyObject *obj, const char *name, AttributeList *attribute_list)
+ 
+     return ret;
+ }
+-
++#endif
+ /*[clinic input]
+ _winapi.CreateProcess
+ 
+@@ -1275,9 +1260,10 @@ _winapi_CreateProcess_impl(PyObject *module,
+     BOOL result;
+     PROCESS_INFORMATION pi;
+     STARTUPINFOEXW si;
+-    wchar_t *wenvironment = NULL;
++    PyObject *environment = NULL;
++    wchar_t *wenvironment;
+     wchar_t *command_line_copy = NULL;
+-    AttributeList attribute_list = {0};
++    //AttributeList attribute_list = {0};
+ 
+     if (PySys_Audit("_winapi.CreateProcess", "uuu", application_name,
+                     command_line, current_directory) < 0) {
+@@ -1305,16 +1291,25 @@ _winapi_CreateProcess_impl(PyObject *module,
+         goto cleanup;
+ 
+     if (env_mapping != Py_None) {
+-        wenvironment = getenvironment(env_mapping);
++        environment = getenvironment(env_mapping);
++        if (environment == NULL) {
++            goto cleanup;
++        }
++        /* contains embedded null characters */
++        wenvironment = PyUnicode_AsUnicode(environment);
+         if (wenvironment == NULL) {
+             goto cleanup;
+         }
+     }
++    else {
++        environment = NULL;
++        wenvironment = NULL;
++    }
+ 
+-    if (getattributelist(startup_info, "lpAttributeList", &attribute_list) < 0)
+-        goto cleanup;
++    //if (getattributelist(startup_info, "lpAttributeList", &attribute_list) < 0)
++    //    goto cleanup;
+ 
+-    si.lpAttributeList = attribute_list.attribute_list;
++    //si.lpAttributeList = attribute_list.attribute_list;
+     if (PyUnicode_Check(command_line)) {
+         command_line_copy = PyUnicode_AsWideCharString(command_line, NULL);
+         if (command_line_copy == NULL) {
+@@ -1356,8 +1351,8 @@ _winapi_CreateProcess_impl(PyObject *module,
+ 
+ cleanup:
+     PyMem_Free(command_line_copy);
+-    PyMem_Free(wenvironment);
+-    freeattributelist(&attribute_list);
++    Py_XDECREF(environment);
++    //freeattributelist(&attribute_list);
+ 
+     return ret;
+ }
+@@ -1731,6 +1726,7 @@ _winapi_PeekNamedPipe_impl(PyObject *module, HANDLE handle, int size)
+     }
+ }
+ 
++#if 0
+ /*[clinic input]
+ _winapi.LCMapStringEx
+ 
+@@ -1766,9 +1762,7 @@ _winapi_LCMapStringEx_impl(PyObject *module, PyObject *locale, DWORD flags,
+         PyErr_SetString(PyExc_OverflowError, "input string is too long");
+         return NULL;
+     }
+-
+-    int dest_size = LCMapStringEx(locale_, flags, src_, (int)src_size, NULL, 0,
+-                                  NULL, NULL, 0);
++    int dest_size = LCMapStringW(locale_, flags, src_, (int)src_size, NULL, 0);
+     if (dest_size <= 0) {
+         DWORD error = GetLastError();
+         PyMem_Free(locale_);
+@@ -1783,8 +1777,7 @@ _winapi_LCMapStringEx_impl(PyObject *module, PyObject *locale, DWORD flags,
+         return PyErr_NoMemory();
+     }
+ 
+-    int nmapped = LCMapStringEx(locale_, flags, src_, (int)src_size, dest, dest_size,
+-                                NULL, NULL, 0);
++    int nmapped = LCMapStringW(locale_, flags, src_, (int)src_size, dest, dest_size);
+     if (nmapped <= 0) {
+         DWORD error = GetLastError();
+         PyMem_Free(locale_);
+@@ -1800,6 +1793,7 @@ _winapi_LCMapStringEx_impl(PyObject *module, PyObject *locale, DWORD flags,
+ 
+     return ret;
+ }
++#endif
+ 
+ /*[clinic input]
+ _winapi.ReadFile
+@@ -2312,7 +2306,7 @@ static PyMethodDef winapi_functions[] = {
+     _WINAPI_OPENFILEMAPPING_METHODDEF
+     _WINAPI_OPENPROCESS_METHODDEF
+     _WINAPI_PEEKNAMEDPIPE_METHODDEF
+-    _WINAPI_LCMAPSTRINGEX_METHODDEF
++    //_WINAPI_LCMAPSTRINGEX_METHODDEF
+     _WINAPI_READFILE_METHODDEF
+     _WINAPI_SETNAMEDPIPEHANDLESTATE_METHODDEF
+     _WINAPI_TERMINATEPROCESS_METHODDEF
+diff --git a/Modules/clinic/_winapi.c.h b/Modules/clinic/_winapi.c.h
+index 861b74f..e13244b 100644
+--- a/Modules/clinic/_winapi.c.h
++++ b/Modules/clinic/_winapi.c.h
+@@ -871,6 +871,7 @@ exit:
+     return return_value;
+ }
+ 
++#if 0
+ PyDoc_STRVAR(_winapi_LCMapStringEx__doc__,
+ "LCMapStringEx($module, /, locale, flags, src)\n"
+ "--\n"
+@@ -902,6 +903,7 @@ _winapi_LCMapStringEx(PyObject *module, PyObject *const *args, Py_ssize_t nargs,
+ exit:
+     return return_value;
+ }
++#endif
+ 
+ PyDoc_STRVAR(_winapi_ReadFile__doc__,
+ "ReadFile($module, /, handle, size, overlapped=False)\n"
+diff --git a/Modules/clinic/posixmodule.c.h b/Modules/clinic/posixmodule.c.h
+index 27f12c0..f64aa96 100644
+--- a/Modules/clinic/posixmodule.c.h
++++ b/Modules/clinic/posixmodule.c.h
+@@ -1201,7 +1201,7 @@ exit:
+ 
+ #endif /* defined(MS_WINDOWS) */
+ 
+-#if defined(MS_WINDOWS)
++#if 0 && defined(MS_WINDOWS)
+ 
+ PyDoc_STRVAR(os__getfinalpathname__doc__,
+ "_getfinalpathname($module, path, /)\n"
+diff --git a/Modules/getaddrinfo.c b/Modules/getaddrinfo.c
+index 0b4620e..c7f0b62 100644
+--- a/Modules/getaddrinfo.c
++++ b/Modules/getaddrinfo.c
+@@ -57,6 +57,7 @@
+ #include "addrinfo.h"
+ #endif
+ 
++#undef ENABLE_IPV6
+ #if defined(__KAME__) && defined(ENABLE_IPV6)
+ # define FAITH
+ #endif
+diff --git a/Modules/getnameinfo.c b/Modules/getnameinfo.c
+index 335021f..d9c79c8 100644
+--- a/Modules/getnameinfo.c
++++ b/Modules/getnameinfo.c
+@@ -48,6 +48,7 @@
+ #include "addrinfo.h"
+ #endif
+ 
++#undef ENABLE_IPV6
+ #ifdef HAVE_NETDB_H
+ #define HAVE_GETNAMEINFO 1
+ 
+@@ -173,7 +174,7 @@ getnameinfo(sa, salen, host, hostlen, serv, servlen, flags)
+     if (host == NULL || hostlen == 0) {
+         /* what should we do? */
+     } else if (flags & NI_NUMERICHOST) {
+-        if (inet_ntop(gni_afd->a_af, addr, numaddr, sizeof(numaddr))
++        if (inet_ntop_(gni_afd->a_af, addr, numaddr, sizeof(numaddr))
+             == NULL)
+             return ENI_SYSTEM;
+         if (strlen(numaddr) > hostlen)
+@@ -204,7 +205,7 @@ getnameinfo(sa, salen, host, hostlen, serv, servlen, flags)
+         } else {
+             if (flags & NI_NAMEREQD)
+                 return ENI_NOHOSTNAME;
+-            if (inet_ntop(gni_afd->a_af, addr, numaddr, sizeof(numaddr))
++            if (inet_ntop_(gni_afd->a_af, addr, numaddr, sizeof(numaddr))
+                 == NULL)
+                 return ENI_NOHOSTNAME;
+             if (strlen(numaddr) > hostlen)
+@@ -215,3 +216,18 @@ getnameinfo(sa, salen, host, hostlen, serv, servlen, flags)
+     return SUCCESS;
+ }
+ #endif // HAVE_NETDB_H
++
++static const char *
++inet_ntop_(int af, const void *src, char *dst, socklen_t size)
++{
++    if (af == AF_INET) {
++        struct in_addr packed_addr;
++        if (size < 16)
++            /* Should set errno to ENOSPC. */
++            return NULL;
++        memcpy(&packed_addr, src, sizeof(packed_addr));
++        return strncpy(dst, inet_ntoa(packed_addr), size);
++    }
++    /* Should set errno to EAFNOSUPPORT */
++    return NULL;
++}
+diff --git a/Modules/getpath.c b/Modules/getpath.c
+index 9ada6d7..4770540 100644
+--- a/Modules/getpath.c
++++ b/Modules/getpath.c
+@@ -274,7 +274,8 @@ getpath_isxfile(PyObject *Py_UNUSED(self), PyObject *args)
+             if (!SUCCEEDED(hr)) {
+                 r = Py_False;
+             }
+-            else if (CompareStringOrdinal(ext, -1, L".exe", -1, 1 /* ignore case */) != CSTR_EQUAL) {
++            //else if (CompareStringOrdinal(ext, -1, L".exe", -1, 1 /* ignore case */) != CSTR_EQUAL) {
++            else if (_wcsicmp(ext, L".exe") != 0) {
+                 r = Py_False;
+             }
+             else {
+diff --git a/Modules/overlapped.c b/Modules/overlapped.c
+index d1f2f11..84dcd08 100644
+--- a/Modules/overlapped.c
++++ b/Modules/overlapped.c
+@@ -718,7 +718,7 @@ Overlapped_dealloc(OverlappedObject *self)
+         self->type != TYPE_NOT_STARTED)
+     {
+         Py_BEGIN_ALLOW_THREADS
+-        if (CancelIoEx(self->handle, &self->overlapped))
++        if (CancelIo(self->handle))
+             wait = TRUE;
+ 
+         ret = GetOverlappedResult(self->handle, &self->overlapped,
+@@ -758,10 +758,7 @@ static PyObject *
+ make_ipv4_addr(const struct sockaddr_in *addr)
+ {
+         char buf[INET_ADDRSTRLEN];
+-        if (inet_ntop(AF_INET, &addr->sin_addr, buf, sizeof(buf)) == NULL) {
+-                PyErr_SetFromErrno(PyExc_OSError);
+-                return NULL;
+-        }
++        strncpy(buf, inet_ntoa(addr->sin_addr), INET_ADDRSTRLEN);
+         return PyUnicode_FromString(buf);
+ }
+ 
+@@ -770,12 +767,8 @@ make_ipv4_addr(const struct sockaddr_in *addr)
+ static PyObject *
+ make_ipv6_addr(const struct sockaddr_in6 *addr)
+ {
+-        char buf[INET6_ADDRSTRLEN];
+-        if (inet_ntop(AF_INET6, &addr->sin6_addr, buf, sizeof(buf)) == NULL) {
+-                PyErr_SetFromErrno(PyExc_OSError);
+-                return NULL;
+-        }
+-        return PyUnicode_FromString(buf);
++        PyErr_SetFromErrno(PyExc_OSError);
++        return NULL;
+ }
+ 
+ static PyObject*
+@@ -833,7 +826,7 @@ _overlapped_Overlapped_cancel_impl(OverlappedObject *self)
+ 
+     if (!HasOverlappedIoCompleted(&self->overlapped)) {
+         Py_BEGIN_ALLOW_THREADS
+-        ret = CancelIoEx(self->handle, &self->overlapped);
++        ret = CancelIo(self->handle);
+         Py_END_ALLOW_THREADS
+     }
+ 
+diff --git a/Modules/posixmodule.c b/Modules/posixmodule.c
+index 8bae334..8b8abc8 100644
+--- a/Modules/posixmodule.c
++++ b/Modules/posixmodule.c
+@@ -1991,7 +1991,7 @@ win32_xstat_impl(const wchar_t *path, struct _Py_stat_struct *result,
+         }
+ 
+         /* Query the reparse tag, and traverse a non-link. */
+-        if (!traverse) {
++        if (0 && !traverse) {
+             if (!GetFileInformationByHandleEx(hFile, FileAttributeTagInfo,
+                     &tagInfo, sizeof(tagInfo))) {
+                 /* Allow devices that do not support FileAttributeTagInfo. */
+@@ -4377,6 +4377,7 @@ os__getfullpathname_impl(PyObject *module, path_t *path)
+ }
+ 
+ 
++#if 0
+ /*[clinic input]
+ os._getfinalpathname
+ 
+@@ -4454,6 +4455,7 @@ os__getfinalpathname_impl(PyObject *module, path_t *path)
+     CloseHandle(hFile);
+     return result;
+ }
++#endif
+ 
+ 
+ /*[clinic input]
+@@ -8951,6 +8953,7 @@ os_symlink_impl(PyObject *module, path_t *src, path_t *dst,
+                 int target_is_directory, int dir_fd)
+ /*[clinic end generated code: output=08ca9f3f3cf960f6 input=e820ec4472547bc3]*/
+ {
++    return path_error2(src, dst);
+ #ifdef MS_WINDOWS
+     DWORD result;
+     DWORD flags = 0;
+@@ -13486,7 +13489,9 @@ os_cpu_count_impl(PyObject *module)
+ {
+     int ncpu = 0;
+ #ifdef MS_WINDOWS
+-    ncpu = GetActiveProcessorCount(ALL_PROCESSOR_GROUPS);
++    SYSTEM_INFO SystemInfo;
++    GetSystemInfo(&SystemInfo);
++    ncpu = SystemInfo.dwNumberOfProcessors;
+ #elif defined(__hpux)
+     ncpu = mpctl(MPC_GETNUMSPUS, NULL, NULL);
+ #elif defined(HAVE_SYSCONF) && defined(_SC_NPROCESSORS_ONLN)
+diff --git a/Modules/socketmodule.c b/Modules/socketmodule.c
+index f0c9b46..da57675 100644
+--- a/Modules/socketmodule.c
++++ b/Modules/socketmodule.c
+@@ -85,6 +85,8 @@ Local naming conventions:
+ 
+ */
+ 
++#undef ENABLE_IPV6
++
+ #ifndef Py_BUILD_CORE_BUILTIN
+ #  define Py_BUILD_CORE_MODULE 1
+ #endif
+@@ -330,6 +332,43 @@ static FlagRuntimeInfo win_runtime_flags[] = {
+     {14393, "TCP_FASTOPEN"}
+ };
+ 
++/* Simplistic emulation code for inet_pton that only works for IPv4 */
++/* These are not exposed because they do not set errno properly */
++
++static int
++inet_pton_(int af, const char *src, void *dst)
++{
++    if (af == AF_INET) {
++#if (SIZEOF_INT != 4)
++#error "Not sure if in_addr_t exists and int is not 32-bits."
++#endif
++        unsigned int packed_addr;
++        packed_addr = inet_addr(src);
++        if (packed_addr == INADDR_NONE)
++            return 0;
++        memcpy(dst, &packed_addr, 4);
++        return 1;
++    }
++    /* Should set errno to EAFNOSUPPORT */
++    return -1;
++}
++
++static const char *
++inet_ntop_(int af, const void *src, char *dst, socklen_t size)
++{
++    if (af == AF_INET) {
++        struct in_addr packed_addr;
++        if (size < 16)
++            /* Should set errno to ENOSPC. */
++            return NULL;
++        memcpy(&packed_addr, src, sizeof(packed_addr));
++        return strncpy(dst, inet_ntoa(packed_addr), size);
++    }
++    /* Should set errno to EAFNOSUPPORT */
++    return NULL;
++}
++
++
+ /*[clinic input]
+ module _socket
+ class _socket.socket "PySocketSockObject *" "&sock_type"
+@@ -1135,7 +1174,7 @@ setipaddr(const char *name, struct sockaddr *addr_ret, size_t addr_ret_size, int
+     if (af == AF_UNSPEC || af == AF_INET) {
+         struct sockaddr_in *sin = (struct sockaddr_in *)addr_ret;
+         memset(sin, 0, sizeof(*sin));
+-        if (inet_pton(AF_INET, name, &sin->sin_addr) > 0) {
++        if (inet_pton_(AF_INET, name, &sin->sin_addr) > 0) {
+             sin->sin_family = AF_INET;
+ #ifdef HAVE_SOCKADDR_SA_LEN
+             sin->sin_len = sizeof(*sin);
+@@ -1150,7 +1189,7 @@ setipaddr(const char *name, struct sockaddr *addr_ret, size_t addr_ret_size, int
+     if ((af == AF_UNSPEC || af == AF_INET6) && !strchr(name, '%')) {
+         struct sockaddr_in6 *sin = (struct sockaddr_in6 *)addr_ret;
+         memset(sin, 0, sizeof(*sin));
+-        if (inet_pton(AF_INET6, name, &sin->sin6_addr) > 0) {
++        if (inet_pton_(AF_INET6, name, &sin->sin6_addr) > 0) {
+             sin->sin6_family = AF_INET6;
+ #ifdef HAVE_SOCKADDR_SA_LEN
+             sin->sin6_len = sizeof(*sin);
+@@ -1217,7 +1256,7 @@ static PyObject *
+ make_ipv4_addr(const struct sockaddr_in *addr)
+ {
+     char buf[INET_ADDRSTRLEN];
+-    if (inet_ntop(AF_INET, &addr->sin_addr, buf, sizeof(buf)) == NULL) {
++    if (inet_ntop_(AF_INET, &addr->sin_addr, buf, sizeof(buf)) == NULL) {
+         PyErr_SetFromErrno(PyExc_OSError);
+         return NULL;
+     }
+@@ -1231,7 +1270,7 @@ static PyObject *
+ make_ipv6_addr(const struct sockaddr_in6 *addr)
+ {
+     char buf[INET6_ADDRSTRLEN];
+-    if (inet_ntop(AF_INET6, &addr->sin6_addr, buf, sizeof(buf)) == NULL) {
++    if (inet_ntop_(AF_INET6, &addr->sin6_addr, buf, sizeof(buf)) == NULL) {
+         PyErr_SetFromErrno(PyExc_OSError);
+         return NULL;
+     }
+@@ -6464,7 +6503,7 @@ socket_inet_pton(PyObject *self, PyObject *args)
+     }
+ #endif
+ 
+-    retval = inet_pton(af, ip, packed);
++    retval = inet_pton_(af, ip, packed);
+     if (retval < 0) {
+         PyErr_SetFromErrno(PyExc_OSError);
+         return NULL;
+@@ -6531,7 +6570,7 @@ socket_inet_ntop(PyObject *self, PyObject *args)
+     }
+ 
+     /* inet_ntop guarantee NUL-termination of resulting string. */
+-    retval = inet_ntop(af, packed_ip.buf, ip, sizeof(ip));
++    retval = inet_ntop_(af, packed_ip.buf, ip, sizeof(ip));
+     if (!retval) {
+         PyErr_SetFromErrno(PyExc_OSError);
+         PyBuffer_Release(&packed_ip);
+@@ -6822,7 +6861,7 @@ Set the default timeout in seconds (float) for new socket objects.\n\
+ A value of None indicates that new socket objects have no timeout.\n\
+ When the socket module is first imported, the default is None.");
+ 
+-#if defined(HAVE_IF_NAMEINDEX) || defined(MS_WINDOWS)
++#if 0//defined(HAVE_IF_NAMEINDEX) || defined(MS_WINDOWS)
+ /* Python API for getting interface indices and names */
+ 
+ static PyObject *
+@@ -7115,7 +7154,7 @@ static PyMethodDef socket_methods[] = {
+      METH_NOARGS, getdefaulttimeout_doc},
+     {"setdefaulttimeout",       socket_setdefaulttimeout,
+      METH_O, setdefaulttimeout_doc},
+-#if defined(HAVE_IF_NAMEINDEX) || defined(MS_WINDOWS)
++#if 0//defined(HAVE_IF_NAMEINDEX) || defined(MS_WINDOWS)
+     {"if_nameindex", socket_if_nameindex,
+      METH_NOARGS, if_nameindex_doc},
+     {"if_nametoindex", socket_if_nametoindex,
+diff --git a/Modules/socketmodule.h b/Modules/socketmodule.h
+index 1b35b11..9f172f4 100644
+--- a/Modules/socketmodule.h
++++ b/Modules/socketmodule.h
+@@ -78,6 +78,8 @@ typedef int socklen_t;
+ # endif /* IPPROTO_IPV6 */
+ #endif /* MS_WINDOWS */
+ 
++#undef ENABLE_IPV6
++
+ #ifdef HAVE_SYS_UN_H
+ # include <sys/un.h>
+ #else
+diff --git a/Modules/timemodule.c b/Modules/timemodule.c
+index b8e0e48..a3c4395 100644
+--- a/Modules/timemodule.c
++++ b/Modules/timemodule.c
+@@ -425,7 +425,6 @@ static PyStructSequence_Desc struct_time_type_desc = {
+   #define CREATE_WAITABLE_TIMER_HIGH_RESOLUTION 0x00000002
+ #endif
+ 
+-static DWORD timer_flags = (DWORD)-1;
+ #endif
+ 
+ static PyObject *
+@@ -2041,23 +2040,6 @@ time_exec(PyObject *module)
+         utc_string = tm.tm_zone;
+ #endif
+ 
+-#if defined(MS_WINDOWS)
+-    if (timer_flags == (DWORD)-1) {
+-        DWORD test_flags = CREATE_WAITABLE_TIMER_HIGH_RESOLUTION;
+-        HANDLE timer = CreateWaitableTimerExW(NULL, NULL, test_flags,
+-                                              TIMER_ALL_ACCESS);
+-        if (timer == NULL) {
+-            // CREATE_WAITABLE_TIMER_HIGH_RESOLUTION is not supported.
+-            timer_flags = 0;
+-        }
+-        else {
+-            // CREATE_WAITABLE_TIMER_HIGH_RESOLUTION is supported.
+-            timer_flags = CREATE_WAITABLE_TIMER_HIGH_RESOLUTION;
+-            CloseHandle(timer);
+-        }
+-    }
+-#endif
+-
+     return 0;
+ }
+ 
+@@ -2217,18 +2199,16 @@ pysleep(_PyTime_t timeout)
+     // SetWaitableTimer(): a negative due time indicates relative time
+     relative_timeout.QuadPart = -timeout_100ns;
+ 
+-    HANDLE timer = CreateWaitableTimerExW(NULL, NULL, timer_flags,
+-                                          TIMER_ALL_ACCESS);
++    HANDLE timer = CreateWaitableTimerW(NULL, 0, NULL);
+     if (timer == NULL) {
+         PyErr_SetFromWindowsErr(0);
+         return -1;
+     }
+ 
+-    if (!SetWaitableTimerEx(timer, &relative_timeout,
++    if (!SetWaitableTimer(timer, &relative_timeout,
+                             0, // no period; the timer is signaled once
+                             NULL, NULL, // no completion routine
+-                            NULL,  // no wake context; do not resume from suspend
+-                            0)) // no tolerable delay for timer coalescing
++                            false)) //fResume=FALSE
+     {
+         PyErr_SetFromWindowsErr(0);
+         goto error;
+diff --git a/PC/launcher2.c b/PC/launcher2.c
+index c169086..f23bdef 100644
+--- a/PC/launcher2.c
++++ b/PC/launcher2.c
+@@ -257,6 +257,8 @@ _comparePath(const wchar_t *x, int xLen, const wchar_t *y, int yLen)
+     } else if (!y || !yLen) {
+         return 1;
+     }
++    return _wcsicmp(x, y);
++
+     switch (CompareStringOrdinal(x, xLen, y, yLen, TRUE)) {
+     case CSTR_LESS_THAN:
+         return -1;
+diff --git a/PC/msvcrtmodule.c b/PC/msvcrtmodule.c
+index 1f78d99..3943e21 100644
+--- a/PC/msvcrtmodule.c
++++ b/PC/msvcrtmodule.c
+@@ -480,7 +480,7 @@ msvcrt_GetErrorMode_impl(PyObject *module)
+     unsigned int res;
+ 
+     _Py_BEGIN_SUPPRESS_IPH
+-    res = GetErrorMode();
++    res = 0;//GetErrorMode();
+     _Py_END_SUPPRESS_IPH
+ 
+     return PyLong_FromUnsignedLong(res);
+diff --git a/PC/winreg.c b/PC/winreg.c
+index 9402781..ea4450b 100644
+--- a/PC/winreg.c
++++ b/PC/winreg.c
+@@ -1051,7 +1051,8 @@ winreg_DeleteKeyEx_impl(PyObject *module, HKEY key,
+         return NULL;
+     }
+     Py_BEGIN_ALLOW_THREADS
+-    rc = RegDeleteKeyExW(key, sub_key, access, reserved);
++    //rc = RegDeleteKeyExW(key, sub_key, access, reserved);
++    rc = RegDeleteKeyW(key, sub_key);
+     Py_END_ALLOW_THREADS
+     if (rc != ERROR_SUCCESS)
+         return PyErr_SetFromWindowsErrWithFunction(rc, "RegDeleteKeyEx");
+diff --git a/PCbuild/_freeze_module.vcxproj b/PCbuild/_freeze_module.vcxproj
+index 0853640..ae819e8 100644
+--- a/PCbuild/_freeze_module.vcxproj
++++ b/PCbuild/_freeze_module.vcxproj
+@@ -93,7 +93,7 @@
+       <WholeProgramOptimization>false</WholeProgramOptimization>
+     </ClCompile>
+     <Link>
+-      <SubSystem>Console</SubSystem>
++      <SubSystem>Console</SubSystem><MinimumRequiredVersion>5.01</MinimumRequiredVersion>
+       <AdditionalDependencies>version.lib;ws2_32.lib;shlwapi.lib;bcrypt.lib;%(AdditionalDependencies)</AdditionalDependencies>
+       <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+     </Link>
+diff --git a/PCbuild/_testconsole.vcxproj b/PCbuild/_testconsole.vcxproj
+index 5d7e14e..1620433 100644
+--- a/PCbuild/_testconsole.vcxproj
++++ b/PCbuild/_testconsole.vcxproj
+@@ -94,7 +94,7 @@
+       <PreprocessorDefinitions>_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+     </ClCompile>
+     <Link>
+-      <SubSystem>Console</SubSystem>
++      <SubSystem>Console</SubSystem><MinimumRequiredVersion>5.01</MinimumRequiredVersion>
+     </Link>
+   </ItemDefinitionGroup>
+   <ItemGroup>
+diff --git a/PCbuild/_testembed.vcxproj b/PCbuild/_testembed.vcxproj
+index a7ea878..a8c419f 100644
+--- a/PCbuild/_testembed.vcxproj
++++ b/PCbuild/_testembed.vcxproj
+@@ -91,7 +91,7 @@
+       <PreprocessorDefinitions>_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+     </ClCompile>
+     <Link>
+-      <SubSystem>Console</SubSystem>
++      <SubSystem>Console</SubSystem><MinimumRequiredVersion>5.01</MinimumRequiredVersion>
+     </Link>
+   </ItemDefinitionGroup>
+   <ItemGroup>
+diff --git a/PCbuild/_testmultiphase.vcxproj b/PCbuild/_testmultiphase.vcxproj
+index 430eb52..e82dd73 100644
+--- a/PCbuild/_testmultiphase.vcxproj
++++ b/PCbuild/_testmultiphase.vcxproj
+@@ -94,7 +94,7 @@
+       <PreprocessorDefinitions>_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+     </ClCompile>
+     <Link>
+-      <SubSystem>Console</SubSystem>
++      <SubSystem>Console</SubSystem><MinimumRequiredVersion>5.01</MinimumRequiredVersion>
+     </Link>
+   </ItemDefinitionGroup>
+   <ItemGroup>
+diff --git a/PCbuild/pylauncher.vcxproj b/PCbuild/pylauncher.vcxproj
+index 35f2f7e..738723d 100644
+--- a/PCbuild/pylauncher.vcxproj
++++ b/PCbuild/pylauncher.vcxproj
+@@ -96,7 +96,7 @@
+     </ClCompile>
+     <Link>
+       <AdditionalDependencies>shell32.lib;pathcch.lib;%(AdditionalDependencies)</AdditionalDependencies>
+-      <SubSystem>Console</SubSystem>
++      <SubSystem>Console</SubSystem><MinimumRequiredVersion>5.01</MinimumRequiredVersion>
+     </Link>
+   </ItemDefinitionGroup>
+   <ItemGroup>
+diff --git a/PCbuild/pyproject.props b/PCbuild/pyproject.props
+index a209672..34819bc 100644
+--- a/PCbuild/pyproject.props
++++ b/PCbuild/pyproject.props
+@@ -69,7 +69,7 @@
+       <AdditionalLibraryDirectories>$(OutDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+       <GenerateDebugInformation>true</GenerateDebugInformation>
+       <ProgramDatabaseFile>$(OutDir)$(TargetName).pdb</ProgramDatabaseFile>
+-      <SubSystem>Windows</SubSystem>
++      <SubSystem>Windows</SubSystem><MinimumRequiredVersion>5.01</MinimumRequiredVersion>
+       <RandomizedBaseAddress>true</RandomizedBaseAddress>
+       <DataExecutionPrevention>true</DataExecutionPrevention>
+       <SuppressStartupBanner>true</SuppressStartupBanner>
+diff --git a/PCbuild/pyshellext.vcxproj b/PCbuild/pyshellext.vcxproj
+index ea432d6..f59778b 100644
+--- a/PCbuild/pyshellext.vcxproj
++++ b/PCbuild/pyshellext.vcxproj
+@@ -95,7 +95,7 @@
+     </ClCompile>
+     <Link>
+       <AdditionalDependencies>version.lib;shlwapi.lib;%(AdditionalDependencies)</AdditionalDependencies>
+-      <SubSystem>Console</SubSystem>
++      <SubSystem>Console</SubSystem><MinimumRequiredVersion>5.01</MinimumRequiredVersion>
+       <ModuleDefinitionFile>..\PC\pyshellext.def</ModuleDefinitionFile>
+     </Link>
+     <Midl>
+diff --git a/PCbuild/python.vcxproj b/PCbuild/python.vcxproj
+index f464045..0a945d4 100644
+--- a/PCbuild/python.vcxproj
++++ b/PCbuild/python.vcxproj
+@@ -93,7 +93,7 @@
+       <PreprocessorDefinitions>Py_BUILD_CORE;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+     </ClCompile>
+     <Link>
+-      <SubSystem>Console</SubSystem>
++      <SubSystem>Console</SubSystem><MinimumRequiredVersion>5.01</MinimumRequiredVersion>
+       <StackReserveSize Condition="$(Configuration) != 'Debug'">2000000</StackReserveSize>
+       <StackReserveSize Condition="$(Configuration) == 'Debug'">8000000</StackReserveSize>
+     </Link>
+diff --git a/PCbuild/python_uwp.vcxproj b/PCbuild/python_uwp.vcxproj
+index fb27e9e..aeae622 100644
+--- a/PCbuild/python_uwp.vcxproj
++++ b/PCbuild/python_uwp.vcxproj
+@@ -94,7 +94,7 @@
+     </ClCompile>
+     <Link>
+       <AdditionalDependencies>windowsapp.lib;%(AdditionalDependencies)</AdditionalDependencies>
+-      <SubSystem>Console</SubSystem>
++      <SubSystem>Console</SubSystem><MinimumRequiredVersion>5.01</MinimumRequiredVersion>
+       <StackReserveSize>2000000</StackReserveSize>
+     </Link>
+   </ItemDefinitionGroup>
+diff --git a/PCbuild/pythonw_uwp.vcxproj b/PCbuild/pythonw_uwp.vcxproj
+index e21e46a..5875cde 100644
+--- a/PCbuild/pythonw_uwp.vcxproj
++++ b/PCbuild/pythonw_uwp.vcxproj
+@@ -94,7 +94,7 @@
+     </ClCompile>
+     <Link>
+       <AdditionalDependencies>windowsapp.lib;%(AdditionalDependencies)</AdditionalDependencies>
+-      <SubSystem>Windows</SubSystem>
++      <SubSystem>Windows</SubSystem><MinimumRequiredVersion>5.01</MinimumRequiredVersion>
+       <StackReserveSize>2000000</StackReserveSize>
+     </Link>
+   </ItemDefinitionGroup>
+diff --git a/PCbuild/pywlauncher.vcxproj b/PCbuild/pywlauncher.vcxproj
+index e50b69a..830d74e 100644
+--- a/PCbuild/pywlauncher.vcxproj
++++ b/PCbuild/pywlauncher.vcxproj
+@@ -96,7 +96,7 @@
+     </ClCompile>
+     <Link>
+       <AdditionalDependencies>shell32.lib;pathcch.lib;%(AdditionalDependencies)</AdditionalDependencies>
+-      <SubSystem>Windows</SubSystem>
++      <SubSystem>Windows</SubSystem><MinimumRequiredVersion>5.01</MinimumRequiredVersion>
+     </Link>
+   </ItemDefinitionGroup>
+   <ItemGroup>
+diff --git a/PCbuild/venvlauncher.vcxproj b/PCbuild/venvlauncher.vcxproj
+index 123e84e..92f2bde 100644
+--- a/PCbuild/venvlauncher.vcxproj
++++ b/PCbuild/venvlauncher.vcxproj
+@@ -99,7 +99,7 @@
+     </ResourceCompile>
+     <Link>
+       <AdditionalDependencies>version.lib;%(AdditionalDependencies)</AdditionalDependencies>
+-      <SubSystem>Console</SubSystem>
++      <SubSystem>Console</SubSystem><MinimumRequiredVersion>5.01</MinimumRequiredVersion>
+     </Link>
+   </ItemDefinitionGroup>
+   <ItemGroup>
+diff --git a/PCbuild/venvwlauncher.vcxproj b/PCbuild/venvwlauncher.vcxproj
+index b8504d5..b0e7a28 100644
+--- a/PCbuild/venvwlauncher.vcxproj
++++ b/PCbuild/venvwlauncher.vcxproj
+@@ -99,7 +99,7 @@
+     </ResourceCompile>
+     <Link>
+       <AdditionalDependencies>version.lib;%(AdditionalDependencies)</AdditionalDependencies>
+-      <SubSystem>Windows</SubSystem>
++      <SubSystem>Windows</SubSystem><MinimumRequiredVersion>5.01</MinimumRequiredVersion>
+     </Link>
+   </ItemDefinitionGroup>
+   <ItemGroup>
+diff --git a/Python/pytime.c b/Python/pytime.c
+index f4f112f..534588c 100644
+--- a/Python/pytime.c
++++ b/Python/pytime.c
+@@ -1048,7 +1048,7 @@ py_get_monotonic_clock(_PyTime_t *tp, _Py_clock_info_t *info, int raise_exc)
+     assert(info == NULL || raise_exc);
+ 
+ #if defined(MS_WINDOWS)
+-    ULONGLONG ticks = GetTickCount64();
++    ULONG ticks = GetTickCount();
+     static_assert(sizeof(ticks) <= sizeof(_PyTime_t),
+                   "ULONGLONG is larger than _PyTime_t");
+     _PyTime_t t;
+-- 
+2.46.0.windows.1
+
diff --git a/ports/python3/portfile.cmake b/ports/python3/portfile.cmake
index 19985c80d..f32d06cbd 100644
--- a/ports/python3/portfile.cmake
+++ b/ports/python3/portfile.cmake
@@ -48,12 +48,14 @@ endif()
 
 # Python 3.9 removed support for Windows 7. This patch re-adds support for Windows 7 and is therefore
 # required to build this port on Windows 7 itself due to Python using itself in its own build system.
-if("deprecated-win7-support" IN_LIST FEATURES)
+#if("deprecated-win7-support" IN_LIST FEATURES)
     list(APPEND PATCHES 0006-restore-support-for-windows-7.patch)
     message(WARNING "Windows 7 support is deprecated and may be removed at any time.")
-elseif(VCPKG_TARGET_IS_WINDOWS AND CMAKE_SYSTEM_VERSION EQUAL 6.1)
-    message(FATAL_ERROR "python3 requires the feature deprecated-win7-support when building on Windows 7.")
-endif()
+#elseif(VCPKG_TARGET_IS_WINDOWS AND CMAKE_SYSTEM_VERSION EQUAL 6.1)
+#    message(FATAL_ERROR "python3 requires the feature deprecated-win7-support when building on Windows 7.")
+#endif()
+
+list(APPEND PATCHES 9999-restore-support-for-windows-xp.patch)
 
 if(VCPKG_TARGET_IS_WINDOWS)
     string(COMPARE EQUAL "${VCPKG_LIBRARY_LINKAGE}" "dynamic" PYTHON_ALLOW_EXTENSIONS)
diff --git a/triplets/x86-windows.cmake b/triplets/x86-windows.cmake
index 93c43c3ba..0a277bdb7 100644
--- a/triplets/x86-windows.cmake
+++ b/triplets/x86-windows.cmake
@@ -1,4 +1,4 @@
 set(VCPKG_TARGET_ARCHITECTURE x86)
 set(VCPKG_CRT_LINKAGE dynamic)
 set(VCPKG_LIBRARY_LINKAGE dynamic)
-
+set(VCPKG_BUILD_TYPE release)
-- 
2.46.0.windows.1

